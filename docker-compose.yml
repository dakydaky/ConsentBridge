services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: gateway
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: gateway
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gateway"]
      interval: 5s
      timeout: 3s
      retries: 20

  mockboard:
    build:
      context: .
      dockerfile: src/MockBoard.Adapter/Dockerfile
    ports: ["8081:8081"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 5s
      timeout: 3s
      retries: 20

  gateway:
    build:
      context: .
      dockerfile: src/Gateway.Api/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      mockboard:
        condition: service_healthy
    environment:
      ConnectionStrings__Default: Host=postgres;Port=5432;Database=gateway;Username=gateway;Password=devpass
      ASPNETCORE_ENVIRONMENT: Development
      MOCKBOARD_URL: http://mockboard:8081
    ports: ["8080:8080"]
    volumes:
      - gateway_dataprotection:/app/dataprotection

  agentconsole:
    build:
      context: .
      dockerfile: src/MockAgent.Console/Dockerfile
    depends_on:
      gateway:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      # Point to gateway in the compose network
      Gateway__BaseUrl: http://gateway:8080
      Gateway__OAuth__TokenEndpoint: /oauth/token
      Gateway__OAuth__ClientId: agent_acme_client
      Gateway__OAuth__ClientSecret: agent-secret
      Gateway__OAuth__Scope: apply.submit
      Gateway__AgentTenantId: agent_acme
      Gateway__BoardTenantId: mockboard_eu
    ports: ["8082:8082"]



volumes:
  gateway_dataprotection:

