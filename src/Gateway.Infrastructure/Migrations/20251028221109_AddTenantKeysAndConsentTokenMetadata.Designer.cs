// <auto-generated />
using System;
using Gateway.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gateway.Infrastructure.Migrations
{
    [DbContext(typeof(GatewayDbContext))]
    [Migration("20251028221109_AddTenantKeysAndConsentTokenMetadata")]
    partial class AddTenantKeysAndConsentTokenMetadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gateway.Domain.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgentTenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BoardTenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PayloadHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Receipt")
                        .HasColumnType("text");

                    b.Property<string>("ReceiptHash")
                        .HasColumnType("text");

                    b.Property<string>("ReceiptSignature")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubmissionAlgorithm")
                        .HasColumnType("text");

                    b.Property<string>("SubmissionKeyId")
                        .HasColumnType("text");

                    b.Property<string>("SubmissionSignature")
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Gateway.Domain.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailHash")
                        .IsUnique();

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Gateway.Domain.Consent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgentTenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApprovedByEmail")
                        .HasColumnType("text");

                    b.Property<string>("BoardTenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TokenAlgorithm")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("TokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TokenHash")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TokenIssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TokenKeyId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("Consents");
                });

            modelBuilder.Entity("Gateway.Domain.ConsentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgentTenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BoardTenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CandidateEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DecisionAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("VerificationAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("VerificationCodeHash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentTenantId");

                    b.HasIndex("ConsentId");

                    b.HasIndex("CandidateEmail", "Status");

                    b.ToTable("ConsentRequests");
                });

            modelBuilder.Entity("Gateway.Domain.ConsentTokenRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("ConsentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.HasIndex("TokenHash");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("ConsentTokens");
                });

            modelBuilder.Entity("Gateway.Domain.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CallbackUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JwksEndpoint")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Gateway.Domain.TenantCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientSecretHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastRotatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("TenantCredentials");
                });

            modelBuilder.Entity("Gateway.Domain.TenantKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PrivateKeyProtected")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PublicJwk")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Purpose")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RetiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Purpose", "KeyId")
                        .IsUnique();

                    b.ToTable("TenantKeys");
                });

            modelBuilder.Entity("Gateway.Domain.Application", b =>
                {
                    b.HasOne("Gateway.Domain.Consent", "Consent")
                        .WithMany()
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("Gateway.Domain.Consent", b =>
                {
                    b.HasOne("Gateway.Domain.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Gateway.Domain.ConsentRequest", b =>
                {
                    b.HasOne("Gateway.Domain.Consent", "Consent")
                        .WithMany()
                        .HasForeignKey("ConsentId");

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("Gateway.Domain.ConsentTokenRecord", b =>
                {
                    b.HasOne("Gateway.Domain.Consent", "Consent")
                        .WithMany()
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("Gateway.Domain.TenantCredential", b =>
                {
                    b.HasOne("Gateway.Domain.Tenant", "Tenant")
                        .WithMany("Credentials")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Gateway.Domain.TenantKey", b =>
                {
                    b.HasOne("Gateway.Domain.Tenant", "Tenant")
                        .WithMany("Keys")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Gateway.Domain.Tenant", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("Keys");
                });
#pragma warning restore 612, 618
        }
    }
}
